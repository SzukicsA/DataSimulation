path_to_json_translation  <- "../../../../../Git/anq-psychiatrie/translations/" #Andreas
path_to_qoptions_data     <- "../../../../../Daten/2023/qoption_data/" #Andreas
#Define desired language (table-outputs only)
selected_language <- 1 # (1 = Deutsch, 2 = Franzoesisch)
# Source JSON-Translation-File and set language
i18n <- Translator$new(translation_json_path = paste0(path_to_json_translation,"translations.json"))
sprache <- i18n$get_languages()[selected_language]
i18n$set_translation_language(sprache)
data_kjp <- readRDS(paste0(path_to_data, "Gesamtdaten_KJP_2023_Regression_aufbereitet_V1.rds"))
data_kjp <- subset(data_kjp, data_kjp$erhebung_1==2)
#PK: Leading 0 to nchar(anq_id)==1
data_kjp$klinik_anonym <- ifelse(nchar(as.character(data_kjp$klinik_anonym))==1, paste0("0", data_kjp$klinik_anonym), data_kjp$klinik_anonym)
# # FM_Datensatz
# data_kjp_FM <- readRDS(paste0(path_to_data,"Gesamtdaten_FM_KJP_2023.rds"))
#
# data_kjp_FM$anq_id <- str_pad(data_kjp_FM$anq_id, 2, pad = "0")
#
# ###Filter 1 setzen: Nur Kliniken der KJP
# data_kjp_FM <- subset(data_kjp_FM, !is.na(data_kjp_FM$anq_id))
#
# #SPSS: Filter setzen erhebung_1==2, hier über subset für tabellenbildung
# data_kjp_FM_erhebung_1_2 <- subset(data_kjp_FM, data_kjp_FM$erhebung_1==2)
#
# ## Regressions Datensets
# #HoNOSCA
# kjp_honosca <- readRDS(paste0(path_to_regressionoutputs, "HoNOSCA_KJP_res2_2023.RDS"))
#
# #HoNOSCA-SR
# kjp_honoscasr <- readRDS(paste0(path_to_regressionoutputs, "HoNOSCASR_KJP_res2_2023.RDS"))
data_kjp23 <- readRDS(paste0(path_to_qoptions_data, "qoption1_data_2023_KJP.rds"))
########
## Einschub fuer Kurzaufenthalte (AP/FP kein BSCL) --> ist überflüssig da HoNOS und BSCL separat ausgewertet werden, lasse es trotzdem noch drin
#Df Kliniktypen 1,2,3 (kurzaufenhalte combined honos und bscl)
df_restkjp                <- data_kjp23
df_restkjp$kurzaufenth    <- ifelse(is.na(df_restkjp$kurzaufenth),99, df_restkjp$kurzaufenth)
# # #DF fuer forensik (kein bscl-kurzaufenthalt)
# df_ap_ep               <- data_kjp23
# df_ap_ep$kurzaufenth   <- ifelse(is.na(df_ap_ep$kurzaufenth),99, df_ap_ep$kurzaufenth)
create_summary_tablet <- function(data) {
# Filter data and select relevant columns
summary_tablet <- data %>%
filter(kurzaufenth != 1, kurzaufenth != 99) %>%
select(klinik_anonym, hpt_diagn_n, abweich_diff) %>%
group_by(klinik_anonym, hpt_diagn_n) %>%
mutate(n_pos = sum(abweich_diff >= 0),
n_neg = sum(abweich_diff < 0)) %>%
summarise(abweich_diff_neg = sum(abweich_diff[abweich_diff < 0]),
abweich_diff_pos = sum(abweich_diff[abweich_diff >= 0]),
n_neg = max(n_neg, na.rm = TRUE),
n_pos = max(n_pos, na.rm = TRUE), .groups = 'drop') %>%
ungroup() %>%
# Replace NaN and Inf with 0
mutate(across(c(abweich_diff_pos, abweich_diff_neg, n_pos, n_neg), ~ ifelse(is.infinite(.) | is.na(.), 0, .))) %>%
group_by(klinik_anonym) %>%
# Calculate n_klinik as the sum of n_pos and n_neg for each diagnosis within klinik_anonym
mutate(n_klinik = sum(n_pos + n_neg)) %>%
ungroup() %>%
# Calculate proportions and absolute differences
mutate(abweich_diff_pos = round(abweich_diff_pos / n_klinik, digits = 2),
abweich_diff_neg = round(abweich_diff_neg / n_klinik, digits = 2),
abweich_betrag = abs(abweich_diff_pos - abweich_diff_neg),
durchs_neg = round(abweich_diff_neg / n_neg, digits = 3),
durchs_pos = round(abweich_diff_pos / n_pos, digits = 3),
durchs_bet = round(abweich_betrag / n_klinik, digits = 3)) %>%
arrange(as.numeric(as.character(klinik_anonym)))
# Extract n_klinik values
n_klinik_values <- summary_tablet %>%
select(klinik_anonym, hpt_diagn_n, n_klinik) %>%
distinct()
# Summarize variables grouped by clinic
summary_clinic <- summary_tablet %>%
group_by(klinik_anonym) %>%
summarise(across(c(n_neg, n_pos, abweich_betrag, abweich_diff_neg, abweich_diff_pos, durchs_neg, durchs_pos, durchs_bet), ~ sum(.x, na.rm = TRUE))) %>%
ungroup() %>%
mutate(hpt_diagn_n = "Gesamt") %>%
left_join(n_klinik_values %>% group_by(klinik_anonym) %>% summarise(n_klinik = sum(n_klinik) / n()), by = "klinik_anonym") %>%
select(klinik_anonym, hpt_diagn_n, n_klinik, abweich_betrag, durchs_bet, n_neg, abweich_diff_neg, durchs_neg, n_pos, abweich_diff_pos, durchs_pos) %>%
arrange(as.numeric(as.character(klinik_anonym)))
# Combine summary rows with the original table
combined_summary <- summary_clinic %>%
group_by(klinik_anonym) %>%
nest() %>%
inner_join(summary_tablet %>% group_by(klinik_anonym) %>% nest(), by = "klinik_anonym") %>%
mutate(data = map2(data.x, data.y, ~ bind_rows(.x, .y))) %>%
select(klinik_anonym, data) %>%
unnest(data) %>%
arrange(as.numeric(as.character(klinik_anonym))) %>%
# Add the new variable 'n' as the sum of 'n_pos' and 'n_neg'
mutate(n = n_pos + n_neg)%>%
select(klinik_anonym, hpt_diagn_n, n, abweich_betrag, durchs_bet, n_neg, abweich_diff_neg, durchs_neg, n_pos, abweich_diff_pos, durchs_pos)
# Ensure three decimal places are always shown
combined_summary <- combined_summary %>%
mutate(durchs_neg = sprintf("%.3f", as.numeric(durchs_neg)),
durchs_pos = sprintf("%.3f", as.numeric(durchs_pos)))
# Replace NaN values in durchs_neg and durchs_pos with "-"
combined_summary <- combined_summary %>%
mutate(durchs_neg = ifelse(is.nan(as.numeric(durchs_neg)), "-", as.character(durchs_neg)),
durchs_pos = ifelse(is.nan(as.numeric(durchs_pos)), "-", as.character(durchs_pos)))
return(combined_summary)
}
# Define hline color
std_border <- fp_border(color = "black")
fontsize_headers <- 9
font_size_table1 <- 8 # PK: Since table 1 (abgeschlossene faelle) has only 3 columns, a separate make_table function is used.
make_table2 <- function(tbl_data, header, additional_header, sep_abs_proz = FALSE, font_size = 8, bscl_check = FALSE) {
ncolumn <- ncol(tbl_data)  # Define ncolumn as the number of columns in tbl_data
# Process the main header
header <- unlist(sapply(header, function(x) {
idx <- as.integer(nchar(str_match(x, "^.{10}.*? ")))
if (!is.na(idx)) {
return(paste0(substr(x, 0, idx - 1), "\n", substr(x, idx + 1, nchar(x))))
} else {
return(x)
}
}))
# Create a dataframe for the main header
header_df <- data.frame(
col_keys = names(tbl_data),
what = header,
stringsAsFactors = FALSE
)
# Process the additional header
additional_header <- unlist(sapply(additional_header, function(x) {
idx <- as.integer(nchar(str_match(x, "^.{10}.*? ")))
if (!is.na(idx)) {
return(paste0(substr(x, 0, idx - 1), "\n", substr(x, idx + 1, nchar(x))))
} else {
return(x)
}
}))
# Create a dataframe for the additional header
additional_header_df <- data.frame(
col_keys = names(tbl_data),
what = additional_header,
stringsAsFactors = FALSE
)
# Calculate column widths based on text length
max_widths <- sapply(tbl_data, function(col) max(nchar(as.character(col)), na.rm = TRUE))
col_widths <- max_widths / sum(max_widths) * 7.832  # Normalize widths to sum up to the total width
# Identify the first row of each clinic group
first_row_indices <- which(tbl_data$hpt_diagn_n == "")
ft <- flextable(tbl_data) %>%
set_header_df(mapping = header_df, key = "col_keys") %>%
add_header_row(values = additional_header_df$what, colwidths = rep(1, ncolumn), top = TRUE) %>%
merge_h(part = "header") %>%
align(align = "right", part = "body") %>%  # Align body text to the right starting from the third row
align(part = "header", align = "center") %>%  # Align header text to the center by default
align(j = 1, align = "left", part = "all") %>%  # Align the first column to the left
width(j = seq_along(col_widths), width = col_widths) %>%
border_remove() %>%
bold(part = "header", i = 2) %>%
fontsize(size = font_size, part = "body") %>%
fontsize(size = fontsize_headers, part = "header") %>%
fontsize(size = 8, part = "header", i = 2) %>%
font(part = "all", fontname = "Gisha") %>%
hline(part = "header", border = std_border) %>%
colformat_num(big.mark = "") %>%
padding(padding.top = 3, padding.bottom = 3, part = "header") %>%
padding(padding.top = 1, padding.bottom = 0, part = "body")
# Align top header to the left
ft <- align(ft, align = "left", part = "header", i = 1)
# Merge cells vertically in "klinik_anonym" column after setting background
ft <- ft %>%
merge_v(j = "klinik_anonym", part = "body") %>%
valign(j = "klinik_anonym", valign = "top", part = "body")
# Align other columns vertically to the top
for (j in 3:ncolumn) {
ft <- ft %>%
valign(j = j, valign = "top", part = "body")
}
# Merge cells in the additional header with the same text
additional_header_unique <- unique(additional_header)
for (header_text in additional_header_unique) {
indices <- which(additional_header == header_text)
if (length(indices) > 1) {
ft <- ft %>%
merge_at(i = 1, j = indices, part = "header")
}
}
# Rotate the entire second header row
ft <- ft %>%
rotate(i = 2, rotation = "btlr", align = "bottom", part = "header")
# Set exact row height for the second header row
ft <- hrule(ft, i = 2, rule = "exact", part = "header") # Change height as needed
return(ft)
}
# Create the summary table
summary_tableSc <- create_summary_tablet(df_restkjp)
# Define headers for the summary table
headers_tablet <- c(i18n$t("Klinik"),
i18n$t("Hauptdiagnose"),
i18n$t("N"),
i18n$t("Abweichung (Summe)"),
i18n$t("Abweichung (Durchschnitt)"),
i18n$t("N"),
i18n$t("Abweichung (Summe)"),
i18n$t("Abweichung (Durchschnitt)"),
i18n$t("N"),
i18n$t("Abweichung (Summe)"),
i18n$t("Abweichung (Durchschnitt)")
)
# Define additional headers for the summary table
# additional_headers_tablet <- c(i18n$t(""), i18n$t(""), rep(i18n$t(""), length(headers_tablet) - 2))
additional_headers_tablet <- c(i18n$t(""),
i18n$t(""),
i18n$t("Fälle mit Abweichungen (gesamt)"),
i18n$t("Fälle mit Abweichungen (gesamt)"),
i18n$t("Fälle mit Abweichungen (gesamt)"),
i18n$t("Fälle mit höherer Selbstbeurteilung"),
i18n$t("Fälle mit höherer Selbstbeurteilung"),
i18n$t("Fälle mit höherer Selbstbeurteilung"),
i18n$t("Fälle mit höherer Fremdbeurteilung"),
i18n$t("Fälle mit höherer Fremdbeurteilung"),
i18n$t("Fälle mit höherer Fremdbeurteilung")
)
# Create the flextable
make_table2(summary_tableSc,
headers_tablet,
additional_headers_tablet,
sep_abs_proz = FALSE,
font_size = 8,
bscl_check = FALSE)
knitr::opts_chunk$set(echo = TRUE, cache = FALSE, dpi=300)
#pandoc version 2.11.4
#R version 4.1.0
library(Rcpp) #1.0.7
library(stats) #4.1.0
library(pander) #0.6.4
library(stringr) #1.4.0
library(data.table) #1.14.2
library(knitr) #1.37
library(qpcR) #1.4-1
library(dplyr) #1.0.4
library(tidyr) #1.1.3
library(readr) #2.0.0
library(plotrix) #3.8-1
library(flextable) #0.6.7
library(officer) #0.3.19
library(shiny.i18n) #0.2.0
library(officedown) #0.2.1
library(purrr) #1.0.2
# #Define paths to epfp-data and to the json-translation-file
# path_to_data <- "C:/Users/ldroh/Documents/whoch2/Daten/2023/" #Luc
# path_to_regressionoutputs <- "C:/Users/ldroh/Documents/whoch2/Daten/2023/regressionen/" #Luc
# path_to_json_translation <- "C:/Users/ldroh/Documents/whoch2/Git/ANQ_General/translations/" #Luc
#Define paths to epfp-data and to the json-translation-file
path_to_data              <- "../../../../../Daten/2023/" #Andreas
path_to_regressionoutputs <- "../../../../../Daten/2023/regressionen/" #Andreas
path_to_json_translation  <- "../../../../../Git/anq-psychiatrie/translations/" #Andreas
path_to_qoptions_data     <- "../../../../../Daten/2023/qoption_data/" #Andreas
#Define desired language (table-outputs only)
selected_language <- 1 # (1 = Deutsch, 2 = Franzoesisch)
# Source JSON-Translation-File and set language
i18n <- Translator$new(translation_json_path = paste0(path_to_json_translation,"translations.json"))
sprache <- i18n$get_languages()[selected_language]
i18n$set_translation_language(sprache)
data_kjp <- readRDS(paste0(path_to_data, "Gesamtdaten_KJP_2023_Regression_aufbereitet_V1.rds"))
data_kjp <- subset(data_kjp, data_kjp$erhebung_1==2)
#PK: Leading 0 to nchar(anq_id)==1
data_kjp$klinik_anonym <- ifelse(nchar(as.character(data_kjp$klinik_anonym))==1, paste0("0", data_kjp$klinik_anonym), data_kjp$klinik_anonym)
# # FM_Datensatz
# data_kjp_FM <- readRDS(paste0(path_to_data,"Gesamtdaten_FM_KJP_2023.rds"))
#
# data_kjp_FM$anq_id <- str_pad(data_kjp_FM$anq_id, 2, pad = "0")
#
# ###Filter 1 setzen: Nur Kliniken der KJP
# data_kjp_FM <- subset(data_kjp_FM, !is.na(data_kjp_FM$anq_id))
#
# #SPSS: Filter setzen erhebung_1==2, hier über subset für tabellenbildung
# data_kjp_FM_erhebung_1_2 <- subset(data_kjp_FM, data_kjp_FM$erhebung_1==2)
#
# ## Regressions Datensets
# #HoNOSCA
# kjp_honosca <- readRDS(paste0(path_to_regressionoutputs, "HoNOSCA_KJP_res2_2023.RDS"))
#
# #HoNOSCA-SR
# kjp_honoscasr <- readRDS(paste0(path_to_regressionoutputs, "HoNOSCASR_KJP_res2_2023.RDS"))
data_kjp23 <- readRDS(paste0(path_to_qoptions_data, "qoption1_data_2023_KJP.rds"))
########
## Einschub fuer Kurzaufenthalte (AP/FP kein BSCL) --> ist überflüssig da HoNOS und BSCL separat ausgewertet werden, lasse es trotzdem noch drin
#Df Kliniktypen 1,2,3 (kurzaufenhalte combined honos und bscl)
df_restkjp                <- data_kjp23
df_restkjp$kurzaufenth    <- ifelse(is.na(df_restkjp$kurzaufenth),99, df_restkjp$kurzaufenth)
# # #DF fuer forensik (kein bscl-kurzaufenthalt)
# df_ap_ep               <- data_kjp23
# df_ap_ep$kurzaufenth   <- ifelse(is.na(df_ap_ep$kurzaufenth),99, df_ap_ep$kurzaufenth)
create_summary_tablet <- function(data) {
# Filter data and select relevant columns
summary_tablet <- data %>%
filter(kurzaufenth != 1, kurzaufenth != 99) %>%
select(klinik_anonym, hpt_diagn_n, abweich_diff) %>%
group_by(klinik_anonym, hpt_diagn_n) %>%
mutate(n_pos = sum(abweich_diff >= 0),
n_neg = sum(abweich_diff < 0)) %>%
summarise(abweich_diff_neg = sum(abweich_diff[abweich_diff < 0]),
abweich_diff_pos = sum(abweich_diff[abweich_diff >= 0]),
n_neg = max(n_neg, na.rm = TRUE),
n_pos = max(n_pos, na.rm = TRUE), .groups = 'drop') %>%
ungroup() %>%
# Replace NaN and Inf with 0
mutate(across(c(abweich_diff_pos, abweich_diff_neg, n_pos, n_neg), ~ ifelse(is.infinite(.) | is.na(.), 0, .))) %>%
group_by(klinik_anonym) %>%
# Calculate n_klinik as the sum of n_pos and n_neg for each diagnosis within klinik_anonym
mutate(n_klinik = sum(n_pos + n_neg)) %>%
ungroup() %>%
# Calculate proportions and absolute differences
mutate(abweich_diff_pos = round(abweich_diff_pos / n_klinik, digits = 2),
abweich_diff_neg = round(abweich_diff_neg / n_klinik, digits = 2),
abweich_betrag = abs(abweich_diff_pos - abweich_diff_neg),
durchs_neg = round(abweich_diff_neg / n_neg, digits = 3),
durchs_pos = round(abweich_diff_pos / n_pos, digits = 3),
durchs_bet = round(abweich_betrag / n_klinik, digits = 3)) %>%
arrange(as.numeric(as.character(klinik_anonym)))
# Extract n_klinik values
n_klinik_values <- summary_tablet %>%
select(klinik_anonym, hpt_diagn_n, n_klinik) %>%
distinct()
# Summarize variables grouped by clinic
summary_clinic <- summary_tablet %>%
group_by(klinik_anonym) %>%
summarise(across(c(n_neg, n_pos, abweich_betrag, abweich_diff_neg, abweich_diff_pos, durchs_neg, durchs_pos, durchs_bet), ~ sum(.x, na.rm = TRUE))) %>%
ungroup() %>%
mutate(hpt_diagn_n = "Gesamt") %>%
left_join(n_klinik_values %>% group_by(klinik_anonym) %>% summarise(n_klinik = sum(n_klinik) / n()), by = "klinik_anonym") %>%
select(klinik_anonym, hpt_diagn_n, n_klinik, abweich_betrag, durchs_bet, n_neg, abweich_diff_neg, durchs_neg, n_pos, abweich_diff_pos, durchs_pos) %>%
arrange(as.numeric(as.character(klinik_anonym)))
# Combine summary rows with the original table
combined_summary <- summary_clinic %>%
group_by(klinik_anonym) %>%
nest() %>%
inner_join(summary_tablet %>% group_by(klinik_anonym) %>% nest(), by = "klinik_anonym") %>%
mutate(data = map2(data.x, data.y, ~ bind_rows(.x, .y))) %>%
select(klinik_anonym, data) %>%
unnest(data) %>%
arrange(as.numeric(as.character(klinik_anonym))) %>%
# Add the new variable 'n' as the sum of 'n_pos' and 'n_neg'
mutate(n = n_pos + n_neg)%>%
select(klinik_anonym, hpt_diagn_n, n, abweich_betrag, durchs_bet, n_neg, abweich_diff_neg, durchs_neg, n_pos, abweich_diff_pos, durchs_pos)
# Ensure three decimal places are always shown
combined_summary <- combined_summary %>%
mutate(durchs_neg = sprintf("%.3f", as.numeric(durchs_neg)),
durchs_pos = sprintf("%.3f", as.numeric(durchs_pos)))
# Replace NaN values in durchs_neg and durchs_pos with "-"
combined_summary <- combined_summary %>%
mutate(durchs_neg = ifelse(is.nan(as.numeric(durchs_neg)), "-", as.character(durchs_neg)),
durchs_pos = ifelse(is.nan(as.numeric(durchs_pos)), "-", as.character(durchs_pos)))
return(combined_summary)
}
# Define hline color
std_border <- fp_border(color = "black")
fontsize_headers <- 9
font_size_table1 <- 8 # PK: Since table 1 (abgeschlossene faelle) has only 3 columns, a separate make_table function is used.
make_table2 <- function(tbl_data, header, additional_header, sep_abs_proz = FALSE, font_size = 8, bscl_check = FALSE) {
ncolumn <- ncol(tbl_data)  # Define ncolumn as the number of columns in tbl_data
# Process the main header
header <- unlist(sapply(header, function(x) {
idx <- as.integer(nchar(str_match(x, "^.{10}.*? ")))
if (!is.na(idx)) {
return(paste0(substr(x, 0, idx - 1), "\n", substr(x, idx + 1, nchar(x))))
} else {
return(x)
}
}))
# Create a dataframe for the main header
header_df <- data.frame(
col_keys = names(tbl_data),
what = header,
stringsAsFactors = FALSE
)
# Process the additional header
additional_header <- unlist(sapply(additional_header, function(x) {
idx <- as.integer(nchar(str_match(x, "^.{10}.*? ")))
if (!is.na(idx)) {
return(paste0(substr(x, 0, idx - 1), "\n", substr(x, idx + 1, nchar(x))))
} else {
return(x)
}
}))
# Create a dataframe for the additional header
additional_header_df <- data.frame(
col_keys = names(tbl_data),
what = additional_header,
stringsAsFactors = FALSE
)
# Calculate column widths based on text length
max_widths <- sapply(tbl_data, function(col) max(nchar(as.character(col)), na.rm = TRUE))
col_widths <- max_widths / sum(max_widths) * 7.832  # Normalize widths to sum up to the total width
# Identify the first row of each clinic group
first_row_indices <- which(tbl_data$hpt_diagn_n == "")
ft <- flextable(tbl_data) %>%
set_header_df(mapping = header_df, key = "col_keys") %>%
add_header_row(values = additional_header_df$what, colwidths = rep(1, ncolumn), top = TRUE) %>%
merge_h(part = "header") %>%
align(align = "right", part = "body") %>%  # Align body text to the right starting from the third row
align(part = "header", align = "center") %>%  # Align header text to the center by default
align(j = 1, align = "left", part = "all") %>%  # Align the first column to the left
width(j = seq_along(col_widths), width = col_widths) %>%
border_remove() %>%
bold(part = "header", i = 2) %>%
fontsize(size = font_size, part = "body") %>%
fontsize(size = fontsize_headers, part = "header") %>%
fontsize(size = 8, part = "header", i = 2) %>%
font(part = "all", fontname = "Gisha") %>%
hline(part = "header", border = std_border) %>%
colformat_num(big.mark = "") %>%
padding(padding.top = 3, padding.bottom = 3, part = "header") %>%
padding(padding.top = 1, padding.bottom = 0, part = "body")
# Align top header to the left
ft <- align(ft, align = "left", part = "header", i = 1)
# Merge cells vertically in "klinik_anonym" column after setting background
ft <- ft %>%
merge_v(j = "klinik_anonym", part = "body") %>%
valign(j = "klinik_anonym", valign = "top", part = "body")
# Align other columns vertically to the top
for (j in 3:ncolumn) {
ft <- ft %>%
valign(j = j, valign = "top", part = "body")
}
# Merge cells in the additional header with the same text
additional_header_unique <- unique(additional_header)
for (header_text in additional_header_unique) {
indices <- which(additional_header == header_text)
if (length(indices) > 1) {
ft <- ft %>%
merge_at(i = 1, j = indices, part = "header")
}
}
# Rotate the entire second header row
ft <- ft %>%
rotate(i = 2, rotation = "btlr", align = "bottom", part = "header")
# Set exact row height for the second header row
ft <- hrule(ft, i = 2, rule = "exact", part = "header") # Change height as needed
return(ft)
}
# Create the summary table
summary_tableSc <- create_summary_tablet(df_restkjp)
# Define headers for the summary table
headers_tablet <- c(i18n$t("Klinik"),
i18n$t("Hauptdiagnose"),
i18n$t("N"),
i18n$t("Abweichung (Summe)"),
i18n$t("Abweichung (Durchschnitt)"),
i18n$t("N"),
i18n$t("Abweichung (Summe)"),
i18n$t("Abweichung (Durchschnitt)"),
i18n$t("N"),
i18n$t("Abweichung (Summe)"),
i18n$t("Abweichung (Durchschnitt)")
)
# Define additional headers for the summary table
# additional_headers_tablet <- c(i18n$t(""), i18n$t(""), rep(i18n$t(""), length(headers_tablet) - 2))
additional_headers_tablet <- c(i18n$t(""),
i18n$t(""),
i18n$t("Fälle mit Abweichungen (gesamt)"),
i18n$t("Fälle mit Abweichungen (gesamt)"),
i18n$t("Fälle mit Abweichungen (gesamt)"),
i18n$t("Fälle mit höherer Selbstbeurteilung"),
i18n$t("Fälle mit höherer Selbstbeurteilung"),
i18n$t("Fälle mit höherer Selbstbeurteilung"),
i18n$t("Fälle mit höherer Fremdbeurteilung"),
i18n$t("Fälle mit höherer Fremdbeurteilung"),
i18n$t("Fälle mit höherer Fremdbeurteilung")
)
# Create the flextable
make_table2(summary_tableSc,
headers_tablet,
additional_headers_tablet,
sep_abs_proz = FALSE,
font_size = 8,
bscl_check = FALSE)
gc()
install.packages(c("openxlsx", "Rcpp"))
install.packages("openxlsx")
install.packages(c("bayestestR", "rio"))
shiny::runApp('whoch2/GIT/anq_psy_app')
runApp('whoch2/GIT/anq_psy_app')
install.packages("shinystore")
runApp('whoch2/GIT/anq_psy_app')
runApp('whoch2/GIT/anq_psy_app')
runApp('whoch2/GIT/anq_psy_app')
install.packages(c("backports", "bayestestR", "brio", "broom", "cli", "colorspace", "crayon", "datawizard", "digest", "effectsize", "esci", "evaluate", "farver", "fs", "ggplot2", "gtable", "insight", "lavaan", "lme4", "markdown", "minqa", "multcomp", "mvtnorm", "nlme", "nloptr", "parameters", "pbkrtest", "performance", "pkgload", "ps", "psych", "quantreg", "Rcpp", "RcppParallel", "rlang", "SparseM", "StanHeaders", "statpsych", "stringi", "survival", "testthat", "withr", "xfun"))
install.packages("backports")
remove.packages("backports")
install.packages("backports")
install.packages(c("cli", "colorspace", "digest", "lme4", "minqa", "nlme", "nloptr", "Rcpp", "rlang", "stringi"))
install.packages(c("cli", "colorspace", "lme4", "minqa", "nlme", "nloptr", "Rcpp", "rlang", "stringi"))
knitr::opts_chunk$set(message = FALSE,
warning = FALSE)
options(scipen=999)
# Dependencies
# N.B.: to ensure full computational reproducibility, R version 4.3.3 should be used.
library(groundhog)
groundhog_day = "2024-04-07"
packages = c("effectsize",
"faux",
"janitor",
"rstatix",
"effsize",
"psych",
"MBESS",
"lsr",
"metafor",
"esc",
"esci",
"dplyr",
"tidyr",
"tibble",
"forcats",
"ggplot2",
"stringr")
groundhog.library(packages, groundhog_day)
install.packages(c("backports", "bayestestR", "brio", "broom", "cli", "colorspace", "crayon", "datawizard", "digest", "effectsize", "esci", "evaluate", "farver", "fs", "ggplot2", "gtable", "insight", "lavaan", "lme4", "markdown", "minqa", "multcomp", "mvtnorm", "nlme", "nloptr", "parameters", "pbkrtest", "performance", "pkgload", "ps", "psych", "quantreg", "Rcpp", "RcppParallel", "rlang", "SparseM", "StanHeaders", "statpsych", "stringi", "survival", "testthat", "withr", "xfun"))
