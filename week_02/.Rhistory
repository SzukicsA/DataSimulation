# remove all objects from environment ----
rm(list = ls())
# dependencies ----
# repeated here for the sake of completeness
library(tidyr)
library(dplyr)
library(forcats)
library(readr)
library(purrr)
library(ggplot2)
library(effsize)
# set the seed ----
# for the pseudo random number generator to make results reproducible
set.seed(42)
# define data generating function ----
generate_data <- function(n_control,
n_intervention,
mean_control,
mean_intervention,
sd_control,
sd_intervention) {
data <-
bind_rows(
tibble(condition = "control",
score = rnorm(n = n_control, mean = mean_control, sd = sd_control)),
tibble(condition = "intervention",
score = rnorm(n = n_intervention, mean = mean_intervention, sd = sd_intervention))
) |>
# control's factor levels must be ordered so that intervention is the first level and control is the second
# this ensures that positive cohen's d values refer to intervention > control and not the other way around.
mutate(condition = fct_relevel(condition, "intervention", "control"))
return(data)
}
# define data analysis function ----
analyse_data_students <- function(data) {
res_t_test <- t.test(formula = score ~ condition,
data = data,
var.equal = TRUE,
alternative = "two.sided")
res <- tibble(p_students = res_t_test$p.value)
return(res)
}
# define data analysis function ----
analyse_data_welches <- function(data) {
res_t_test <- t.test(formula = score ~ condition,
data = data,
var.equal = FALSE,
alternative = "two.sided")
res <- tibble(p_welches = res_t_test$p.value)
return(res)
}
# define experiment parameters ----
experiment_parameters_grid <- expand_grid(
n_control = 50,
n_intervention = 25,
mean_control = 0,
mean_intervention = 0,
sd_control = 0.66,
sd_intervention = 1.33,
iteration = 1:5000 # increased number of iterations for more stable estimates. NB real stimulation are often much higher again.
)
# run simulation ----
simulation <-
# using the experiment parameters
experiment_parameters_grid |>
# generate data using the data generating function and the parameters relevant to data generation
mutate(generated_data = pmap(list(n_control,
n_intervention,
mean_control,
mean_intervention,
sd_control,
sd_intervention),
generate_data)) |>
# apply the analysis function to the generated data using the parameters relevant to analysis
mutate(analysis_results_students = pmap(list(generated_data),
analyse_data_students),
analysis_results_welches = pmap(list(generated_data),
analyse_data_welches))
# summarise simulation results over the iterations ----
simulation_reshaped <- simulation |>
unnest(analysis_results_students) |>
unnest(analysis_results_welches) |>
pivot_longer(cols = c("p_students", "p_welches"),
names_to = "test",
values_to = "p")
# table
simulation_reshaped |>
group_by(test) |>
summarize(FPR = janitor::round_half_up(mean(p < .05), 2))
# plot
ggplot(simulation_reshaped, aes(p)) +
geom_histogram(boundary = 0, binwidth = 0.05) +
geom_vline(xintercept = 0.05, color = "orange") +
facet_wrap(~ test)
# plot zoomed in on p values between 0 and 0.10
ggplot(simulation_reshaped, aes(p)) +
geom_histogram(boundary = 0, binwidth = 0.01) +
geom_vline(xintercept = 0.05, color = "orange") +
facet_wrap(~ test) +
coord_cartesian(xlim = c(0, 0.1))
